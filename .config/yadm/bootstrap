#!/usr/bin/env bash

_SCRIPT="${BASH_SOURCE}"
_SCRIPT_DIR="${_SCRIPT%/*}"


#########
# Setup ########################################################################
#########

DATE="$(date -Is)"

set -eu -o pipefail
# keep track of the last executed command
trap 'last_command=${current_command:-""}; current_command=$BASH_COMMAND' DEBUG
# echo an error message before exiting
trap 'trap_exit $?' EXIT
trap_exit() {
    local err=$1;

    notify --print

    if [[ $err > 0 ]]; then
        if [[ $__task_name != "" ]]; then
            err "Task \"${__task_name}\" failed with exit code ${err}."
        else
            err "Command \"${last_command}\" filed with exit code ${err}."
        fi
    fi
}

export PATH="${HOME}/.local/bin:${PATH}"

fg_black="$(tput setaf 0)"
fg_red="$(tput setaf 1)"
fg_green="$(tput setaf 2)"
fg_yellow="$(tput setaf 3)"
fg_blue="$(tput setaf 4)"
fg_magenta="$(tput setaf 5)"
fg_cyan="$(tput setaf 6)"
fg_white="$(tput setaf 7)"
reset="$(tput sgr0)"

__task_name=""
task() {
    case "$1" in
        '--done')
            __task_name=""
            return
            ;;
        '--print')
            if [[ -n "${2:-}" ]]; then
                __task_name="$2"
            fi
            echo ""
            echo "${fg_green}==> ${__task_name} <==${reset}"
            return
            ;;
        '--'*)
            err "Wrong task action \"${action}\""
            exit 1
            ;;
    esac
    __task_name="$1"
}

info() {
    echo "${fg_blue}:: ${@}${reset}"
}

err() {
    echo ""
    echo "${fg_red}=> ERROR: $@${reset}"
}

__notificaions=()
notify() {
    if [[ "$1" == "--print" ]]; then
        if [[ ${#__notificaions[@]} -eq 0 ]]; then
            return
        fi
        echo ""
        echo "${fg_magenta}Notifications:${reset}"
        local n
        for n in "${__notificaions[@]}"; do
            echo "  --> $n"
        done
        echo ""
    fi
    __notificaions+=("$1")
}


installed() {
    if ! command -v "$1" >/dev/null; then
        return 0
    fi
}

backup-mv() {
    local path="$1"
    local bak="${path}.${DATE}.bak"
    if [[ ! -e $path ]]; then return; fi
    if [[ -e $bak ]]; then
        err "A backup \"${bak}\" already exists"
        exit 1
    fi
    info "Backing up \"${path}\" -> \"${bak}\""
    mv -- "$path" "$bak"
    notify "Backup created: \"${path}\" -> \"${bak}\""
}


#############
# Bootstrap ####################################################################
#############


task "Include global \`~/.yadm-gitconfig\` in yadm's gitconfig"
if [[ "$(yadm gitconfig include.path)" != "~/.yadm-gitconfig" ]]; then
    task --print

    yadm gitconfig include.path '~/.yadm-gitconfig'
fi
task --done


task "Install nix"
if ! installed nix; then
    task --print

    curl -L https://nixos.org/nix/install | sh
fi
task --done


task "Install Homebrew"
if ! installed brew; then
    task --print

    sudo -k
    SUDO_ASKPASS="$(which false)" \
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi
task --done


task --print "Install NvChad"
if ! git -C ~/.config/nvim remote -v 2>/dev/null | grep -q $'origin\thttps://github.com/NvChad/NvChad (fetch)'; then
    task --print

    backup-mv ~/.config/nvim
    backup-mv ~/.local/share/nvim
    backup-mv ~/.local/state/nvim
    backup-mv ~/.cache/nvim
    
    git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1
    ln -sr ~/.config/nvchad ~/.config/nvim/lua/custom

    notify "NvChad has been installed. Open nvim to install packages."
fi
task --done


task --print "Install Firefox userChrome.css link"
if [[ -f ~/.mozilla/firefox/profiles.ini ]]; then
    "${_SCRIPT_DIR}/scripts/create-firefox-userchrome-link.py" "${_SCRIPT_DIR}/files/userChrome.css" ~/.mozilla/firefox/profiles.ini
fi
task --done


task --print "Check installed programs"
x3ro.check
task --done


