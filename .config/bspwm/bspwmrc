#!/usr/bin/env bash

SCRIPT="$(realpath "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT")"

XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
BSPWM_DIR="${XDG_CONFIG_HOME}/bspwm"
RUN_DIR="${BSPWM_DIR}/run"
mkdir -p "$RUN_DIR"

if [[ -f "${BSPWM_DIR}/.is-bspwm-restart" ]]; then
	rm "${BSPWM_DIR}/.is-bspwm-restart"
	is_restart="true"
fi

path_prepend() { [ -e $1 ] && PATH=":${PATH}" && PATH="${1}${PATH//:$1/}"; }

path_prepend "${HOME}/.local/bin"
export PATH


# --- Autostart ---

# Monitor layout
#$HOME/.screenlayout/default.sh &
if [[ $(autorandr --current) != "" ]]; then
	: # Do nothing
elif [[ $(autorandr --detected | wc -l) -gt 0 ]]; then
	# Automatic
	autorandr --change
else
	# Fallback
	autorandr horizontal
fi

# Trigger `autorandr` on display (un)plug
# NOTE: The `kill -- -$(pgrep ...)` (using the negative of the PID) kills the
#       whole process group of the process. To ensure that only the processes
#       get killed that we want to kill we have to also call the program using
#       `setsid`.
kill -- -$(pgrep -f "${BSPWM_DIR}/scripts/autorandr-daemon.sh\$")
setsid "${BSPWM_DIR}/scripts/autorandr-daemon.sh" &

# PipeWire EasyEffects
pkill -x easyeffects || pkill -x '.easyeffects-wr'
easyeffects --gapplication-service &

# Bar
$HOME/.config/polybar/launch.sh &

# Notification Center
pkill -x deadd-notification-center || pkill -x '.deadd-notifica'
deadd-notification-center &

# Shorcuts
pkill -x sxhkd
sxhkd & # sxhkd is started by nix package of bspwm but with wrong PATH

# Compositor
pkill -x picom
sleep 0.2
"${BSPWM_DIR}/scripts/start-picom.sh" &

# Desktop Background
#feh --bg-fill ~/Pictures/\[Wallpapers\]/1920x1080/tree-on-a-hill.jpg &
~/.fehbg &

# Solaar Key Daemon
pkill -f "^python3 $HOME/.local/scripts/solaar-keys/solaar-key-daemon\$"
~/.local/scripts/solaar-keys/solaar-key-daemon &

# Playerctl Daemon (keeps track of last active player)
pkill -x playerctld
playerctld &

# Manage Removable Media
pkill -x udiskie || pkill -x '.udiskie-wrappe'
udiskie &

# Auto-Hide Cursor
pkill unclutter; unclutter & # install `unclutter-xfixes`

# Other Autostart Apps
if [[ "$is_restart" != true ]]; then
	(sleep 3 && cd "${BSPWM_DIR}" && "./autostart.sh") &
fi

# Automatic screen lock
LOCK_AFTER_MINUTES=15
LOCK_FADE_OUT_SECONDS=15

#xset s 0 0 # Disable screen locking
pkill -x xss-lock
xset s $((LOCK_AFTER_MINUTES * 60)) $LOCK_FADE_OUT_SECONDS
env XSECURELOCK_DIM_TIME_MS=$((LOCK_FADE_OUT_SECONDS * 1000)) \
    XSECURELOCK_BLANK_TIMEOUT=10 \
    XSECURELOCK_BLANK_DPMS_STATE=standby \
    XSECURELOCK_AUTH_TIMEOUT=10 \
    XSECURELOCK_BURNIN_MITIGATION=100 \
        xss-lock -n `which xsecurelock-dimmer` -l -- xsecurelock &

# --- Restart user services that need access to the X server ---
systemctl --user restart \
	gamemoded


# --- Setup ---

# Workspaces
bspc monitor primary -d {1..10}

# Config
bspc config window_gap              15
bspc config border_width            1
bspc config pointer_follows_monitor false
bspc config focus_follows_pointer   true
bspc config focused_border_color    "#0071db"
bspc config removal_adjustment      "false"
bspc config gapless_monocle         true
bspc config automatic_scheme        alternate
bspc config split_ratio             0.6


# --- Rules ---

bspc rule --add 'Tor Browser:Navigator' state=pseudo_tiled private=on
bspc rule --add 'copyq'                 state=floating
bspc rule --add 'ksnip'                 state=floating layer=above
bspc rule --add 'zoom'                  state=floating #focus=off border=off
bspc rule --add '*:Godot_Engine'        state=floating
bspc rule --add 'rsi launcher.exe'      state=floating

