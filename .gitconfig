[include]
	path = .gitconfig.local
[core]
	editor = code --wait
	excludesfile = /home/x3ro/.gitignore-global
[pull]
	ff = only
[merge]
	ff = false
[push]
	default = simple
[gc]
	autoDetach = false
[alias]
	new = "!new() { local m=\"${*:-\"Initial commit.\"}\"; if [[ ! -d .git ]]; then git init && git commit --allow-empty -m \"$m\"; else echo \"ERROR: Git repository already initialized!\" >&2; exit 1; fi; }; new"
	tree = log --date=iso --graph --pretty=\"format:%C(yellow)%<(7)%h%C(reset)%x09%ad%C(reset)  %C(blue)%<(15)%an%C(reset)  %C(bold yellow)%d%C(reset) %C(green)%s%C(reset)\"
	tree-all = tree --exclude refs/stash --all
	co = checkout
	st = status
	br = branch
	cm = commit -m
	ca = commit --amend
	amend = commit --amend

    # === Emoji Log ===
    # NEW.
    cnew = "!f() { git commit -e -m \"📦 NEW: $@\"; }; f"
    # IMPROVE.
    cimp = "!f() { git commit -e -m \"👌 IMPROVE: $@\"; }; f"
    # FIX.
    cfix = "!f() { git commit -e -m \"🐛 FIX: $@\"; }; f"
    # RELEASE.
    crlz = "!f() { git commit -e -m \"🚀 RELEASE: $@\"; }; f"
    # DOC.
    cdoc = "!f() { git commit -e -m \"📖 DOC: $@\"; }; f"
    # TEST.
    ctst = "!f() { git commit -e -m \"🤖 TEST: $@\"; }; f"
    # BREAKING CHANGE.
    cbrk = "!f() { git commit -e -m \"‼️ BREAKING: $@\"; }; f"
