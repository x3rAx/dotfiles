#!/usr/bin/env -S deno run --allow-all
// vi: ft=typescript

import { $ } from "jsr:@david/dax";
import { parseArgs } from "jsr:@std/cli";

const _SCRIPT_NAME = "wh";

const _HELP = $.dedent({
    trimLeadingNewline: false,
    trimTrailingNewline: false,
})`
    Usage:
        ${_SCRIPT_NAME} [options] [--] <command> <action> [[action-arg | %]...]
        ${_SCRIPT_NAME} -e [--] COMMAND

    Get the path to the executable of the given <command> (similar to \`which\`) and optionally
    execute an <action> on it. The resulting path will be passed to the action as the last argument
    unless \`%\` is provided as argument, in which case \`%\` will be replaced with the executable
    path.

    OPTIONS:
        -h, --help      - Show this help message.
        -e, --edit      - Open the result in $EDITOR.
        -r, --realpath  - Resolve the realpath of the result.
        -x, --exec      - Execute the given command with the result as argument. The command will
                          be executed in a bash subshell.
                          Example: ${_SCRIPT_NAME} -x $'nvim $(dirname "$@")' 
`;

function print_help({ stderr = true } = {}) {
    if (stderr) {
        console.error(_HELP);
        return;
    }
    console.log(_HELP);
}

function unknown_argument(arg: string, key?: string, _value?: unknown) {
    if (key === undefined) {
        return;
    }
    const dashes = arg.startsWith("--") ? "--" : "-";
    $.logError(`ERROR: Unknown option: ${dashes}${key}`);
    print_help({ stderr: true });
    Deno.exit(1);
}

async function run(args: string[]): Promise<never> {
    let child;
    try {
        child = new Deno.Command(args[0], { args: args.slice(1) })
            .spawn();
    } catch (err: Error | unknown) {
        if (err instanceof Error) {
            $.logError(`ERROR: ${err.message}`);
        } else {
            $.logError(`ERROR: ${err}`);
        }
        Deno.exit(1);
    }
    const status = await child.status;
    Deno.exit(status.code);
}

async function main() {
    const args_to_parse = [];
    const args_for_action = [];
    let counter_non_option = 0;

    // Collect arguments until two non-option arguments are found. All other
    // options and arguments are collected for the action and will not be
    // parsed.
    for (const arg of Deno.args) {
        if (counter_non_option >= 2) {
            args_for_action.push(arg);
            continue;
        }

        if (!arg.startsWith("-")) {
            counter_non_option++;
        }

        args_to_parse.push(arg);
    }

    const args = parseArgs(args_to_parse, {
        boolean: ["help", "edit", "realpath"],
        string: ["exec"],
        alias: { "h": "help", "e": "edit", "r": "realpath", "x": "exec" },
        unknown: unknown_argument,
    });

    if (args.help) {
        print_help();
        Deno.exit(0);
    }

    if (args._.length < 1) {
        $.logError(`ERROR: Missing argument "COMMAND".`);
        print_help({ stderr: true });
        Deno.exit(1);
    }

    const command = args._[0] as string;
    const action = [...args._.slice(1), ...args_for_action] as string[];

    // --- Find the file ---
    let file = await $.which(command);
    if (file === undefined) {
        $.logError(`ERROR: Command "${command}" can not be found`);
        Deno.exit(1);
    }

    // --- Resolve realpath ---
    if (args.realpath) {
        file = await $`realpath ${file}`.text();
    }

    // --- Edit ---
    if (args.edit) {
        const editor = Deno.env.get("EDITOR");
        if (editor === undefined) {
            $.logError(`ERROR: "$EDITOR" is not set.`);
            Deno.exit(1);
        }
        if (await $.which(editor) === undefined) {
            $.logWarn(
                `WARNING: "$EDITOR" is set to "${editor}" which could not be found in path.`,
            );
        }
        await run([editor, file]);
    }

    // --- Execute ---
    if (args.exec) {
        const result = await $`bash -c ${args.exec} -s ${file}`;
        Deno.exit(result.code);
    }

    // --- Print file path if no action is given ---
    if (!action.length) {
        console.log(file);
        Deno.exit(0);
    }

    // --- Replace `%` with file path ---
    let file_replaced = false;
    for (const [i, arg] of action.entries()) {
        if (arg == "%") {
            action[i] = file;
            file_replaced = true;
            break;
        }
    }

    // --- Append file path if no `%` was present ---
    if (!file_replaced) {
        action.push(file);
    }

    // --- Execute the action ---
    await run(action);
}

if (import.meta.main) {
    await main();
}
