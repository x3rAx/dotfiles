#!/usr/bin/env bash

[ "$#" -eq 1 ] || { echo >&2 "ERROR: Expected one argument: <direction>"; exit 1; }

direction="$1"

[[ $direction =~ ^(north|south|east|west)$ ]] \
    || { echo >&2 "ERROR: Direction must be one of \"north, south, east, west\""; exit 1; }

index_of() {
    local haystack=( "${1[@]}" )
    local needle="$2"
    for i in "${!haystack[@]}"; do
        if [[ ${haystack[$i]} == $needle ]]; then
            echo "$i"
            return
        fi
    done
    echo "-1"
}
is_first_child() {
    [[ $(bspc query -N -n) == $(bspc query -N -n @parent/1) ]] || return 1
}
get_self_split_type() {
    node=$(bspc query -N -n @parent); bspc query -T -n $node | jq -r '.splitType'
}
get_target_split_type() {
    # TODO: Make this dependent on the `automatic_scheme` option
    dim=( $(bspc query -T -n $direction | jq '.rectangle.width,.rectangle.height') )
    width="${dim[0]}"
    height="${dim[1]}"
    if (( $width > $height ))
        then echo "vertical"
        else echo "horizontal"
    fi
}
get_movement_type() {
    if [[ $direction =~ ^(north|south)$ ]]
        then echo "vertical"
        else echo "horizontal"
    fi
}

node_brother="$(bspc query -N @brother -n)"
node_direction="$(bspc query -N -n "$direction")"

if [[ -z $node_direction ]]; then
    # When moving to the edge of the monitor, create a new receptacle and move
    # the node to it
    bspc node @/ -p "$direction" -i
    bspc node -n any.leaf.\!window
elif [[ $node_direction == $node_brother ]]; then
    # If target node is brother of current node, just swap them
    bspc node --swap "$direction" --follow
else
    # Move node into target node. Take into account how the target node will
    # split and insert the current node so that it is "closest" to it's
    # previous location
    initial_polarity="$(bspc config initial_polarity)"
    
    if [[ $direction == "north" ]] && [[ $(get_target_split_type) == "horizontal" ]]; then
            bspc config initial_polarity "last_child"
    elif [[ $direction == "east" ]] && [[ $(get_target_split_type) == "vertical" ]]; then
            bspc config initial_polarity "first_child"
    elif [[ $direction == "south" ]] && [[ $(get_target_split_type) == "horizontal" ]]; then
            bspc config initial_polarity "first_child"
    elif [[ $direction == "west" ]] && [[ $(get_target_split_type) == "vertical" ]]; then
            bspc config initial_polarity "last_child"
    fi

    bspc node --to-node "$direction" --follow
    bspc config initial_polarity "$initial_polarity"
fi

##!/bin/bash

## A more fluid way of moving windows with BSPWM, which is meant to be
## implemented in SXHKD.  If there is a window in the given direction,
## swap places with it.  Else if there is a receptacle move to it
## ("consume" its place).  Otherwise create a receptacle in the given
## direction by splitting the entire viewport (circumvents the tiling
## scheme while respecting the current split ratio configuration).  In
## the latter scenario, inputting the direction twice will thus move the
## focused window out of its current layout and into the receptacle.
##
## Part of my dotfiles: https://gitlab.com/protesilaos/dotfiles
##
## Copyright (c) 2019 Protesilaos Stavrou <info@protesilaos.com>
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.


#[ "$#" -eq 1 ] || { echo "Pass only one argument: north,east,south,west"; exit 1; }

## Check if argument is a valid direction.
#case "$1" in
#    north|east|south|west)
#        dir="$1"
#        ;;
#    *)
#        echo "Not a valid argument."
#        echo "Use one of: north,east,south,west"
#        exit 1
#        ;;
#esac

#_query_nodes() {
#    bspc query -N -n "$@"
#}

## Do not operate on floating windows!
#[ -z "$(_query_nodes focused.floating)" ] || { echo "Only move tiled windows."; exit 1; }

#receptacle="$(_query_nodes 'any.leaf.!window')"

## This regulates the behaviour documented in the description.
#if [ -n "$(_query_nodes "${dir}.!floating")" ]; then
#    bspc node -s "$dir"
#elif [ -n "$receptacle" ]; then
#    bspc node focused -n "$receptacle" --follow
#else
#    bspc node @/ -p "$dir" -i && bspc node -n "$receptacle" --follow
#fi


