#!/usr/bin/env bash

# More safety by turning bugs into errors.
# Use `${PIPESTATUS[n]}` to check for the `n`-th pipe command's exit status.
# Make sure there are no uninitialized variables.
# To allow a non-zero exit status or to allow a pipe to fail without exiting
# the script, prefix the command with `!`.
# Option `noclobber` makes sure piping into a file with `>` does not
# override existing files. Use `>|` to overwrite files instead.
# Environment variables are `UPPER_SNAKE_CASE`, global constants are
# `_UNDERSCORE_PREFIXED` and global variables are `_underscore_prefixed`
set -o errexit -o pipefail -o nounset -o noclobber

: ${XDG_CONFIG_HOME:=$HOME/.config}
: ${XDG_CACHE_HOME:=$HOME/.cache}

readonly _SCRIPT="$(realpath "$0")"
readonly _SCRIPT_NAME="${_SCRIPT##*/}"
readonly _SCRIPT_DIR="${_SCRIPT%/*}"

err() { echo >&2 "${_SCRIPT_NAME}: $@"; }

readonly _ERR_USAGE=2
readonly _ERR_PROGRAMMING=255

readonly _USAGE="
  Usage:
    $_SCRIPT_NAME <options> <destination>
    $_SCRIPT_NAME -h|--help
"
readonly _HELP="
  ptr - A ping based traceroute implementation
${_USAGE}
  OPTIONS:
    -h, --help              Show this help message.
    -t, --timeout <timeout_sec>
                            Set the timeout for each ping.
                            Default: 1
    -H, --max-hops <max_hops>
                            Set the maximum number of hops.
                            Default: 255
    -V, --verbose           Print the ping response.
"

readonly _OPTIONS='ht:H:V'
readonly _LONGOPTS='help,timeout:,max-hops:,verbose'

parsed="$(getopt -o "$_OPTIONS" -l "$_LONGOPTS" -n "$_SCRIPT_NAME" -- "$@")"
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then echo >&2 "$_USAGE"; exit $_ERR_USAGE; fi
eval set -- "${parsed[@]}"; unset parsed

_timeout="1"
_max_hops="255"
_verbose=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)      echo "$_HELP"; exit; ;;
        -t|--timeout)   _timeout="$2"; shift 2; ;;
        -H|--max-hops)  _max_hops="$2"; shift 2; ;;
        -V|--verbose)   _verbose=true; shift; ;;
        --)             shift; break; ;;
        *)              err "Programming error"; exit $_ERR_PROGRAMMING; ;;
    esac
done

# --- main program -------------------------------------------------------------

_address="${1:-}"

if [[ -z $_address ]]; then
    err "No destination specified"
    echo >&2 "$_USAGE"
    exit $_ERR_USAGE
fi

_color_support=false
if [[ -t 1 && -n $(tput colors) ]]; then
    _color_support=true
fi

function main() {
    last_addr=""

    for ((i=1; _max_hops==0 || i<=_max_hops; i++)); do
        response="$(ping -t"$i" -c1 -w"${_timeout}" "$_address" || true)"
        if [[ $_verbose == true ]]; then
            echo ''
            if [[ $_color_support == true ]]; then
                echo -n "$(tput setaf 8)"
            fi
            echo "$response"
            if [[ $_color_support == true ]]; then
                echo -n "$(tput sgr0)"
            fi
        fi
        addr="$(
            echo "$response" \
                | grep -oP '[fF]rom [\w.]+( \([\w.]+\)|)' \
                | cut -d' ' -f2- \
                || true
        )"
        if [[ -n $addr && "$addr" == "$last_addr" ]]; then
            break
        fi
        echo "$i: ${addr:--}"
        last_addr="$addr"
    done
}

main "$@"
