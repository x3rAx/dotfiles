#!/usr/bin/env bash

# More safety by turning bugs into errors.
# Use `${PIPESTATUS[n]}` to check for the `n`-th pipe command's exit status.
# Make sure there are no uninitialized variables.
# To allow a non-zero exit status or to allow a pipe to fail without exiting
# the script, prefix the command with `!`.
# Option `noclobber` makes sure piping into a file with `>` does not
# override existing files. Use `>|` to overwrite files instead.
# Environment variables are `UPPER_SNAKE_CASE`, global constants are
# `_UNDERSCORE_PREFIXED` and global variables are `_underscore_prefixed`
set -o errexit -o pipefail -o nounset -o noclobber

: ${XDG_CONFIG_HOME:=$HOME/.config}
: ${XDG_CACHE_HOME:=$HOME/.cache}

readonly _SCRIPT="$(realpath "$0")"
readonly _SCRIPT_NAME="${_SCRIPT##*/}"
readonly _SCRIPT_DIR="${_SCRIPT%/*}"

err() { echo >&2 "${_SCRIPT_NAME}: $@"; }

readonly _ERR_DEPENDENCY=200

## --- main program -------------------------------------------------------------

if ! command -v unbuffer >/dev/null; then
    err 'Missing program `unbuffer`. Install package `expect` and try again.'
    exit $_ERR_DEPENDENCY
fi

# Collect options to first argument
opts=()
while [[ $1 =~ ^- ]]; do
    if [[ $1 == '--' ]]; then
        shift
        break
    fi
    opts+=( "$1" )
    shift
done

# All other arguments are the provided command
cmd=( "$@" )

sudo=''
if [[ ${cmd[0]} == 'sudo' ]]; then
    cmd=( "${cmd[@]:1}" )
    sudo='sudo'
fi

exec watch --color -n1 "${opts[@]}" $sudo unbuffer "${cmd[@]}"

