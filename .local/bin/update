#!/usr/bin/env bash

set -eu

main() {
    # Pull dotfiles
    run-if yadm \
        yadm pull --rebase --autostash

	# Update channels (legacy)
	run-if /etc/nixos/flake.nix \
	       sudo nix-channel --update
	run nix-channel --update

	# TODO: Commit flake.lock after update

	# Update Nixos systems
	run-if /etc/nixos/flake.nix \
		sudo nix flake update --flake /etc/nixos
	run-if - /etc/nixos/rebuild

    # Update Debian/Ubuntu systems
    run-if apt \
        sudo apt update
    run-if apt \
        sudo apt upgrade -y

	# Update home-manager
	run-if ~/.config/home-manager/flake.nix \
		nix flake update --flake ~/.config/home-manager/
	run-if - nh home switch ~/.config/home-manager/

	#run nix-env --upgrade

	# Other package managers
	run-if - flatpak update -y

	# Single app updates
	run-if - lug-helper-update
	run-if - starship-update -y
	run-if - youtube-dl-update
	run-if ~/.local/bin/yt-dlp \
        yt-dlp -U

	run ~/.local/opt/kopia/updater.sh

    run-if - deno upgrade

    echo >&2 ""
    echo >&2 ""
    read -p "${_bold}${_yellow}Do you want to auto-commit the home-manager flake.lock in your dotfiles? [Yn] " inp
    if [[ ${inp^^} == 'Y' ]] || [[ $inp == '' ]]; then
        pushd ~/ >/dev/null
        run yadm restore --staged .
        run yadm add ~/.config/home-manager/flake.lock
        run yadm cimp 'Update home-manager flake.lock'
        popd >/dev/null
    fi

    echo >&2 ""
    echo >&2 ""
    read -p "${_bold}${_yellow}Do you want to push your dotfiles? [Yn] " inp
    if [[ ${inp^^} == 'Y' ]] || [[ $inp == '' ]]; then
        pushd ~/ >/dev/null
        run yadm push
        popd >/dev/null
    fi
}

################################################################################

_bold=$(tput bold)
_normal=$(tput sgr0)
_yellow=$(tput setaf 11)
_red=$(tput setaf 1)
_teal=$(tput setaf 14)
_green=$(tput setaf 10)

run() {
	local err

	while :; do
		err=0
		echo >&2 "${_bold}${_yellow}==> RUN: ${*}${_normal}"
		"$@" || err=$?

		if [[ $err -eq 0 ]]; then
			break
		fi

		echo >&2 ""
		echo >&2 "${_bold}${_red}ERROR: Command \`${*}\` exited with an exit code of ${err}.${_normal}"
		echo >&2 "${_bold}       Do you want to continue or retry? [C/r/q]: ${_normal}"
		read inp

        # Continue
		if [[ ${inp,,} == 'c' ]] || [[ -z $inp ]]; then
			break
		fi

        # Retry
		if [[ ${inp,,} == 'r' ]]; then
			continue
		fi

        # Quit (or anything else)
        exit $err
	done
}

# Usage:
#   run-if command-or-path-to-check command-to-run arg1 arg2
#   run-if - command-to-check-and-run arg1 arg2
run-if() {
	local check=$1
	shift
	if [[ $check == '-' ]]; then
		check=$1
	fi
	if ! command-exists "$check" && ! path-exists "$check"; then
		echo >&2 "${_bold}${_teal}==> SKIPPING (missing ${check}): ${@}${_normal}"
		return
	fi
	run "$@"
}

path-exists() {
	local path=$1
	[[ -e "$path" ]]
}

command-exists() {
	local cmd=$1
	command -v "$cmd" >/dev/null
}

finish() {
	local code=$?
	echo ''
	if [[ $code -gt 0 ]]; then
		echo >&2 "${_bold}${_red}ERROR: Update exited with code: ${code}${_normal}"
		exit
	fi
	echo >&2 "${_bold}${_green}==> Done${_normal}"
}
trap finish EXIT

sudo true
main "$@"
