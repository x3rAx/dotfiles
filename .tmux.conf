# .tmux.conf
#############


########################################################################################################
#                                                                                                      #
#   A huge THANKS to Alexey Samoshkin (GitHub: samoshkin) !!!                                          #
#                                                                                                      #
#   This config is heavily influenced by his config file at https://github.com/samoshkin/tmux-config   #
#   He really gave me the kickstart to use tmux that I needed!                                         #
#                                                                                                      #
#   <3                                                                                                 #
#                                                                                                      #
########################################################################################################


# Default tmux bindings (https://gist.github.com/mzmonsour/8791835)
#
#   bind-key        C-b send-prefix
#   bind-key        C-o rotate-window
#   bind-key        C-z suspend-client
#   bind-key      Space next-layout
#   bind-key          ! break-pane
#   bind-key          " split-window
#   bind-key          # list-buffers
#   bind-key          $ command-prompt -I #S "rename-session '%%'"
#   bind-key          % split-window -h
#   bind-key          & confirm-before -p "kill-window #W? (y/n)" kill-window
#   bind-key          ' command-prompt -p index "select-window -t ':%%'"
#   bind-key          ( switch-client -p
#   bind-key          ) switch-client -n
#   bind-key          , command-prompt -I #W "rename-window '%%'"
#   bind-key          - delete-buffer
#   bind-key          . command-prompt "move-window -t '%%'"
#   bind-key          0 select-window -t :0
#   bind-key          1 select-window -t :1
#   bind-key          2 select-window -t :2
#   bind-key          3 select-window -t :3
#   bind-key          4 select-window -t :4
#   bind-key          5 select-window -t :5
#   bind-key          6 select-window -t :6
#   bind-key          7 select-window -t :7
#   bind-key          8 select-window -t :8
#   bind-key          9 select-window -t :9
#   bind-key          : command-prompt
#   bind-key          ; last-pane
#   bind-key          = choose-buffer
#   bind-key          ? list-keys
#   bind-key          D choose-client
#   bind-key          L switch-client -l
#   bind-key          [ copy-mode
#   bind-key          ] paste-buffer
#   bind-key          c new-window
#   bind-key          d detach-client
#   bind-key          f command-prompt "find-window '%%'"
#   bind-key          i display-message
#   bind-key          l last-window
#   bind-key          n next-window
#   bind-key          o select-pane -t :.+
#   bind-key          p previous-window
#   bind-key          q display-panes
#   bind-key          r refresh-client
#   bind-key          s choose-tree
#   bind-key          t clock-mode
#   bind-key          w choose-window
#   bind-key          x confirm-before -p "kill-pane #P? (y/n)" kill-pane
#   bind-key          z resize-pane -Z
#   bind-key          { swap-pane -U
#   bind-key          } swap-pane -D
#   bind-key          ~ show-messages
#   bind-key      PPage copy-mode -u
#   bind-key -r      Up select-pane -U
#   bind-key -r    Down select-pane -D
#   bind-key -r    Left select-pane -L
#   bind-key -r   Right select-pane -R
#   bind-key        M-1 select-layout even-horizontal
#   bind-key        M-2 select-layout even-vertical
#   bind-key        M-3 select-layout main-horizontal
#   bind-key        M-4 select-layout main-vertical
#   bind-key        M-5 select-layout tiled
#   bind-key        M-n next-window -a
#   bind-key        M-o rotate-window -D
#   bind-key        M-p previous-window -a
#   bind-key -r    M-Up resize-pane -U 5
#   bind-key -r  M-Down resize-pane -D 5
#   bind-key -r  M-Left resize-pane -L 5
#   bind-key -r M-Right resize-pane -R 5
#   bind-key -r    C-Up resize-pane -U
#   bind-key -r  C-Down resize-pane -D
#   bind-key -r  C-Left resize-pane -L
#   bind-key -r C-Right resize-pane -R


# ================================
# ===     General settings     ===
# ================================

# Stop tmux from launching shell as login shell
set -g default-command "${SHELL}"

#set -g default-terminal "screen-256color"
set -g default-terminal "tmux-256color"
set -g history-limit 500000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
#set -g repeat-time 1000
set -g repeat-time 10000
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on

# Change prefix to Ctrl+Space (Keys like Ctrl+a or Ctrl+b are used for cursor movement in bash)
    set -g prefix C-Space
    bind C-Space send-prefix

# Set parent terminal title to reflect current window in tmux session 
    set -g set-titles on
    set -g set-titles-string "#I:#W"


# Start index of window/pane with 1 (makes it easier to navigate using number keys)
    set -g base-index 1
    setw -g pane-base-index 1

# Enable mouse support
    set -g mouse on

# Create and move windows with mouse
    bind-key -n DoubleClick1StatusDefault new-window
    # First mark the current window if it isnt. Then, when mouse hovers over
    # another window, select that window and swap it with the marked one.
    bind-key -n MouseDrag1Status if '[ #{pane_marked} -ne 1 ]' \
        'select-pane -m -t=' \
        'select-window -t= ; swap-pane'
    # When releasing the mouse, remove mark
    bind-key -n MouseDragEnd1Status select-pane -M
    bind-key -n MouseDragEnd1StatusLeft select-pane -M
    bind-key -n MouseDragEnd1StatusRight select-pane -M
    bind-key -n MouseDragEnd1StatusDefault select-pane -M


# ============================
# ===     Key Bindings     ===
# ============================

# Unbind default key bindings, we're going to override
#unbind "\$" # rename-session
#unbind ,    # rename-window
#unbind %    # split-window -h
#unbind '"'  # split-window
#unbind }    # swap-pane -D
#unbind {    # swap-pane -U
#unbind [    # paste-buffer
#unbind ]    
#unbind "'"  # select-window
#unbind n    # next-window
#unbind p    # previous-window
#unbind l    # last-window
#unbind M-n  # next window with alert
#unbind M-p  # next window with alert
#unbind o    # focus thru panes
#unbind &    # kill-window
#unbind "#"  # list-buffer 
#unbind =    # choose-buffer
#unbind z    # zoom-pane
#unbind M-Up  # resize 5 rows up
#unbind M-Down # resize 5 rows down
#unbind M-Right # resize 5 rows right
#unbind M-Left # resize 5 rows left


# Open tmux manual
    bind M-? new-window -t 0 -n 'TMUX' "man tmux"

# Edit configuration and reload
    bind C-M-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration 
    bind C-r display "Config reloaded" \; source-file ~/.tmux.conf

# New window (retain cwd)
    bind c new-window -c "#{pane_current_path}"
    bind C new-window -c "#{pane_current_path}" \;\
        command-prompt -p "Name:" "rename-window '%%'"

# Prompt to rename window right after it's created
    #set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
    bind r command-prompt "rename-window '%%'"
    bind M-r command-prompt -I "#{window_name}" "rename-window '%%'"
    bind R command-prompt "rename-session '%%'"
    bind M-R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
    #bind | split-window -h -c "#{pane_current_path}"
    #bind _ split-window -v -c "#{pane_current_path}"

# Use vim-like keys for splits and windows
    bind s split-window -v -c "#{pane_current_path}"
    bind v split-window -h -c "#{pane_current_path}"
    bind -r h select-pane -L
    bind -r j select-pane -D
    bind -r k select-pane -U
    bind -r l select-pane -R

# Fast & smart pane switching with awareness of vim splits
    #bind -n M-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)(n){0,1}vim$' && tmux send-keys M-h) || tmux select-pane -L"
    #bind -n M-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)(n){0,1}vim$' && tmux send-keys M-j) || tmux select-pane -D"
    #bind -n M-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)(n){0,1}vim$' && tmux send-keys M-k) || tmux select-pane -U"
    #bind -n M-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)(n){0,1}vim$' && tmux send-keys M-l) || tmux select-pane -R"
    #bind -n M-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)(n){0,1}vim$' && tmux send-keys 'M-\\') || tmux select-pane -l"
    bind -n M-h select-pane -L
    bind -n M-j select-pane -D
    bind -n M-k select-pane -U
    bind -n M-l select-pane -R
    bind -n M-\\ select-pane -l

# Fast window switching
    bind -n M-. next-window
    bind -n M-, previous-window
    bind -n M-/ last-window

# Session switching
    #bind -r ( switch-client -t-1
    #bind -r ) switch-client -t+1
    bind -r _ switch-client -l

# Swap panes / windows
    bind -r J swap-pane -D
    bind -r K swap-pane -U
    bind -r < swap-window -d -t -1
    bind -r > swap-window -d -t +1
    bind -r H join-pane -h -t :-1
    bind -r L join-pane -h -t :+1

# Switch to last window
    bind -r Tab last-window

# Pane resizing
    bind-key -r C-h resize-pane -L 3
    bind-key -r C-j resize-pane -D
    bind-key -r C-k resize-pane -U
    bind-key -r C-l resize-pane -R 3

# Focus on active pane (move other panes to the side or bottom)
    bind-key = select-layout main-vertical \; swap-pane -t 1 \; select-pane -t 1
    bind-key + select-layout main-horizontal \; swap-pane -t 1 \; select-pane -t 1
    set-window-option -g other-pane-height 25
    set-window-option -g other-pane-width 80

# Zoom pane
    bind z resize-pane -Z

# Link window
    # ???
    #bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane (and always focus 1st pane)
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
    bind \\ if '[ #{pane_index} -eq 1 ]' \
         'swap-pane -s "!" ; select-pane -t 1' \
         'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Move pane around
    #bind-key   @ choose-window 'join-pane -h -s "%%"'
    #bind-key C-@ choose-window 'join-pane    -s "%%"'

# Kill pane/window/session shortcuts
    bind x   confirm -p "kill pane? (y/n)" kill-pane
    bind X   confirm -p "kill window? (y/n)" kill-window
    bind C-x confirm -p "kill other windows? (y/n)" "kill-window -a"
    bind Q   confirm -p "kill-session '#S'? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
    #bind C-m choose-tree -Zs "switch-client -t '%%' ; run-shell \"~/.tmux/merge-session.sh '#{session_id}'\""
    #bind C-m run-shell "\
    #    current_id='#{session_id}' \;\
    #    tmux choose-tree -Zs \"\
    #        : switch-client -t '%%' ;\
    #        : run-shell '~/.tmux/merge-session.sh \'\\\${current_id}\'' \
    #        run-shell '~/.tmux/merge-session.sh \'xxx\'' \
    #    \" \;\
    #"
    bind C-m run-shell "\
        current_id='\\#{session_id}' \;\
        echo \"\${current_id}\" \;\
        tmux run-shell \"~/.tmux/merge-session.sh '\${current_id}'\" \;\
        echo \"tmux run shell '~/.tmux/merge-session.sh \${current_id}'\" \;\
        echo \"tmux run shell \\\"~/.tmux/merge-session.sh '\${current_id}'\\\"\" \;\
        tmux run-shell \"tmux run shell \\\"~/.tmux/merge-session.sh '\${current_id}'\\\"\" \;\
    "
        #choose-tree -Zs "switch-client -t '%%' ; run-shell \"~/.tmux/merge-session.sh '#{session_id}'\""

# Detach from session
    # Detach current client
    bind d detach
    # Detach other clients
    bind D if -F '#{session_many_attached}' \
        'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
        'display "Session has only 1 client attached"'

# Hide status bar on demand
    bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'



# ==========================================================
# ===     Window monitoring for activity and silence     ===
# ==========================================================
    bind M-m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
    bind M-M if -F '#{monitor-silence}' \
        'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
        'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
    set -g visual-activity on

# TODO: Does not work as well, check on newer versions
    #set -g visual-silence on

# BUG: bell-action other ignored · Issue #1027 · tmux/tmux · GitHub - https://github.com/tmux/tmux/issues/1027
    #set -g visual-bell on
    #setw -g bell-action other



# ==============================================
# ===    Copy mode, scroll and clipboard     ===
# ==============================================

# Fall back to ANSI OSC 52 escape sequence to talk to controlling/parent terminal and pass buffer on local machine
    set -g @copy_use_osc52_fallback on

# Prefer vi style key table
    setw -g mode-keys vi

# Paste / buffer selection
    bind ]   paste-buffer
    bind C-] choose-buffer

# trigger copy mode by Alt-Up
    #bind -n M-Up copy-mode

# Leave copy mode
    bind -T copy-mode-vi Escape      if-shell -F '#{selection_present}' \
                                             'send-keys -X clear-selection' \
                                             'send-keys -X cancel'
    bind -T copy-mode-vi q           send-keys -X cancel

# Scroll up/down by 1 line, half screen, whole screen
    bind -T copy-mode-vi M-Up        send-keys -X scroll-up
    bind -T copy-mode-vi M-Down      send-keys -X scroll-down
    bind -T copy-mode-vi M-PageUp    send-keys -X halfpage-up
    bind -T copy-mode-vi M-PageDown  send-keys -X halfpage-down
    bind -T copy-mode-vi PageDown    send-keys -X page-down
    bind -T copy-mode-vi PageUp      send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
    #bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
    #bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
    #if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    #    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

yank="~/.tmux/yank.sh"

# Setup 'v' to begin selection as in vi
    bind-key -T copy-mode-vi v send-keys -X begin-selection

# Copy selected text
    bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
    bind -T copy-mode-vi y send-keys -X copy-pipe "$yank" \;\
        send-keys -X clear-selection
    bind -T copy-mode-vi Y send-keys -X copy-line \;\
        run "tmux save-buffer - | $yank"
    bind -T copy-mode-vi D send-keys -X copy-end-of-line \;\
        run "tmux save-buffer - | $yank"
    #bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
    bind -T copy-mode-vi A send-keys -X append-selection \;\
        run "tmux save-buffer - | $yank" \;\
        send-keys -X clear-selection
    bind -T copy-mode-vi p send-keys -X cancel \;\
        paste-buffer

# Copy selection (to primary) on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
    bind -T copy-mode-vi MouseDragEnd1Pane \
        send-keys -X copy-pipe-no-clear "$yank --sel"
    bind -T copy-mode-vi MouseDown1Pane \
        select-pane \;\
       send-keys -X clear-selection
    # Cancel copy mode with right click
    bind -T copy-mode-vi MouseDown3Pane \
        send-keys -X copy-pipe "$yank" \;\
        send-keys -X cancel
    # Cancel copy mode and paste selection with middle click
    bind -T copy-mode-vi MouseDown2Pane \
        send-keys -X cancel \;\
        paste-buffer

    # Paste selection with middle mouse button
    unbind-key MouseDown2Pane
    bind-key -n MouseDown2Pane run "tmux set-buffer -- \"$(xclip -o -sel primary);\"; tmux paste-buffer -p"
    #unbind-key MouseDown2Pane
    #bind-key -n MouseDown2Pane run " \
    #    tmux set-buffer -- \"ERROR\"; \
    #    X=\"$(xclip -o -sel primary)\"; \
    #    tmux set-buffer -- \"\$X \"; \
    #    tmux paste-buffer -p; \
    #"
    
# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# Choose tree (select session / window / pane in zoomed tree view)
    bind w   choose-tree -Z -w
    bind C-w choose-tree -Z -s

# Switch to other session and kill current one
    #bind W confirm -p "Kill current session and switch to other one? (y/N)" '\
    #    run-shell "\
    #        name=\"___KILL_IT_WITH_FIRE___\" ;\
    #        tmux rename-session \"${name}\" ;\
    #        tmux choose-tree -Z -s ;\
    #        tmux kill-session -t \"${name}\" ;\
    #    "\
    #'


# Double LMB Select Word
bind-key -n DoubleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"



# =====================
# ===     Theme     ===
# =====================

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# =====================================
# ===           Theme               ===
# =====================================

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# =====================================
# ===    Appearence and status bar  ===
# ======================================

# TODO: What is this?
set -g mode-style "fg=default,bg=$color_main"

# Command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""
separator_powerline_left_thin=''
separator_powerline_right_thin=''

# setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
    setw -g window-status-format " #{?pane_marked,», }#I:#W#{?pane_marked,«, } "
# This gets overwritten by window-status-current-format
    #setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[fg=$color_light,bold,bg=$color_main]#{?pane_marked,», }#I:#W#{?pane_marked,«, }#[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

setw -g window-status-last-style "fg=$color_light,bold"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"

# general status bar settings
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-right-length 100

# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#[fg=$color_session_text] #S #[default]"
wg_battery="#{battery_status_fg} #{battery_icon} #{battery_percentage}"
wg_date="#[fg=$color_secondary]%h %d %H:%M#[default]"
wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z]#[default] ,}#[default]"
# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF#[default] ')#[default]"

set -g status-left "$wg_session"
#set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} | #{sysstat_mem} | #{sysstat_loadavg} | $wg_user_host | $wg_date $wg_battery #{online_status}"
set -g status-right "#{prefix_highlight} ${wg_is_keys_off}${wg_is_zoomed} ${wg_user_host} ${separator_powerline_left_thin} $wg_date "

# online and offline icon for tmux-online-status
set -g @online_icon "#[fg=$color_level_ok]●#[default]"
set -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}'

# Configure colors for tmux-plugin-sysstat "MEM" and "CPU" widget
set -g @sysstat_cpu_color_low "$color_level_ok"
set -g @sysstat_cpu_color_medium "$color_level_warn"
set -g @sysstat_cpu_color_stress "$color_level_stress"

set -g @sysstat_mem_color_low "$color_level_ok"
set -g @sysstat_mem_color_medium "$color_level_warn"
set -g @sysstat_mem_color_stress "$color_level_stress"

set -g @sysstat_swap_color_low "$color_level_ok"
set -g @sysstat_swap_color_medium "$color_level_warn"
set -g @sysstat_swap_color_stress "$color_level_stress"


# Configure tmux-battery widget colors
set -g @batt_color_full_charge "#[fg=$color_level_ok]"
set -g @batt_color_high_charge "#[fg=$color_level_ok]"
set -g @batt_color_medium_charge "#[fg=$color_level_warn]"
set -g @batt_color_low_charge "#[fg=$color_level_stress]"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"



# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root M-z  \
    set mouse off \;\
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right #I:#W #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S

# Tell the remote tmux session to use C-Space prefix
bind M-C-z \
    run-shell 'tmux send-keys "C-b" ":"; tmux send-keys "set -g prefix C-Space ; setw -g mode-keys vi" "Enter"'

bind M-z send-keys M-z

bind -T off M-z \
    set mouse on \;\
    set -u prefix \;\
    set -u key-table \;\
    set -u status-style \;\
    set -u window-status-current-style \;\
    set -u window-status-current-format \;\
    refresh-client -S





# ----------------------------------------------------------------------------------------------------------------
# Change scroll speed for VScode (set the following in `settings.json`:
#     "terminal.integrated.env.linux": { "VSCODE": "yes" })
    if-shell "[ $VSCODE = 'yes' ]" "\
        set -g @scroll-speed-num-lines-per-scroll 3 \
    "






# Do not leave copy mode after mouse up
    #unbind -T copy-mode-vi MouseDragEnd1Pane


# Easy config reload
    #bind-key R source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded."


# Other key bindings
    #bind-key : command-prompt
    #bind-key r refresh-client
    #bind-key L clear-history
    #bind-key C-o rotate-window

# Copy selection to clipboard (press "y")
    #bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# Update default binding of `Enter` to also use copy-pipe
    #unbind -T copy-mode-vi Enter
    #bind-key -T copy-mode-vi send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

#bind -T root C-M-Space  \
#  set prefix None \;\
#  set key-table off \;\
#  set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
#  set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
#  set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
#  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
#  refresh-client -S \;\
#
#bind -T off C-M-Space \
#  set -u prefix \;\
#  set -u key-table \;\
#  set -u status-style \;\
#  set -u window-status-current-style \;\
#  set -u window-status-current-format \;\
#  refresh-client -S
#  
#wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"
#
#set -g status-right "$wg_is_keys_off #{sysstat_cpu} | #{sysstat_mem} | #{sysstat_loadavg} | $wg_user_host"








# TODO: Merge with settings above
#set -g window-style 'fg=colour247,bg=colour236'
#set -g window-active-style 'fg=colour250,bg=black'
#set -g window-status-bell-style 'fg=cyan'
set -g pane-active-border-style "fg=$color_main,bg=colour236"
set -g pane-border-style "fg=$color_main,bg=colour236"




# === KEEP AT BOTTOM ===========================================================
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'

#set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
#set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
#set -g @plugin 'samoshkin/tmux-plugin-sysstat'
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Plugin properties
set -g @sidebar-tree 't'
set -g @sidebar-tree-focus 'T'
set -g @sidebar-tree-command 'tree -C'

set -g @open-S 'https://www.google.com/search?q='

set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

set -g @resurrect-save 'M-s'
set -g @resurrect-restore 'M-r'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
# === / KEEP AT BOTTOM =========================================================
